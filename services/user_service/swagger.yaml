#user_service/swagger.yaml

paths:
  /register:
    post:
      summary: Register a new user
      description: Creates a new user with the given email, password, and role. Admin role requires authentication key.
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: User to register
          schema:
            type: object
            required:
              - name
              - email
              - password
              - role
            properties:
              name:
                type: string
                example: "John Doe"
              email:
                type: string
                format: email
                example: "john@example.com"
              password:
                type: string
                format: password
                example: "********"
              role:
                type: string
                enum:
                  - User
                  - Admin
                example: "User"
              adminKey:
                type: string
                description: Required only when registering as Admin
                example: "admin-secret-key"
      responses:
        201:
          description: User registered successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "User registered successfully"
              user_id:
                type: string
                format: uuid
                example: "123e4567-e89b-12d3-a456-426614174000"
              role:
                type: string
                enum:
                  - User
                  - Admin
                example: "User"
        409:
          description: Email already exists
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Email already exists"
        403:
          description: Invalid admin authentication key
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid admin authentication key"

  /login:
    post:
      summary: Log in a user
      description: Authenticates a user with the given email and password
      consumes:
        - application/json
      parameters:
        - in: body
          name: credentials
          description: User credentials
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                example: "john@example.com"
              password:
                type: string
                format: password
                example: "********"
      responses:
        200:
          description: Login successful
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login successful"
              token:
                type: string
                format: jwt
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              role:
                type: string
                enum:
                  - User
                  - Admin
                example: "User"
        401:
          description: Invalid credentials
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid credentials"

  /profile:
    get:
      summary: Get user profile
      description: Retrieves the profile of the authenticated user. For admin, returns all user profiles.
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile(s) retrieved successfully
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  example: "123e4567-e89b-12d3-a456-426614174000"
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                role:
                  type: string
                  enum:
                    - User
                    - Admin
                  example: "User"
        404:
          description: User not found
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User not found"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT